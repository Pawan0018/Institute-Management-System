@model IEnumerable<InstitudeManagement.Models.Addmission1>

@{
    ViewData["Title"] = "Admission Table";
}

<nav class="navbar navbar-light bg-warning">
    <div class="container-fluid d-flex justify-content-center align-items-center">
        <a href="/" class="navbar-brand">
            <img src="~/Images/Picsart_24-12-07_18-34-26-772 (1).png" style="width:80px;" alt="Logo" />
        </a>
        <h1 class="display-4 fw-bold mx-auto text-center text-white">Addmission Table</h1>
    </div>
</nav>


<div class="container-fluid my-3">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <!-- Search Filter -->
        <div class="text-end">
            <form method="get" class="row g-2">
                <div class="col-auto">
                    <label for="fromDate" class="form-label">From Date:</label>
                    <input type="date" id="fromDate" name="fromDate" class="form-control form-control-sm" />
                </div>
                <div class="col-auto">
                    <label for="toDate" class="form-label">To Date:</label>
                    <input type="date" id="toDate" name="toDate" class="form-control form-control-sm" />
                </div>
                <div class="col-auto d-flex align-items-end">
                    <button type="submit" class="btn btn-primary btn-sm">Search</button>
                </div>
            </form>
        </div>

        <div>
            <h4 class="d-flex">Total Admission: @Model.Count()</h4>
            <form asp-controller="AddmissionController1" asp-action="AddmissionTable" method="get" class="d-flex">
                <input type="text" name="searchString" value="@ViewData["CurrentFilter"]" class="form-control form-control-sm me-2" placeholder="Search" />
                <button type="submit" class="btn btn-primary btn-sm">Search</button>
            </form>
        </div>
    </div>


    <!-- Action Buttons (Initially Hidden) -->

    <div class="mb-3 d-flex justify-content-between" id="actionButtons" style="display: none;">
        <!-- Left Side: Create New and Back Page buttons -->
        <div class="d-flex gap-3">
            <a asp-action="Create" class="btn btn-success btn-sm">Create New</a>
            <a asp-action="Dashboard" asp-controller="Home" class="btn btn-secondary btn-sm">Back Page</a>
        </div>

        <!-- Right Side: Edit, Details, Delete, WhatsApp, and Message buttons -->
        <div class="d-flex gap-3">
            <a id="editButton" class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#selectStudentModal">
                Edit
            </a>
            <a id="detailsButton" class="btn btn-info btn-sm" data-bs-toggle="modal" data-bs-target="#selectStudentModal">
                Details
            </a>
            <a id="deleteButton" class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#selectStudentModal">
                Delete
            </a>

            <!-- WhatsApp Button -->
            <a id="whatsappButton" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#selectStudentModal">
                <i class="fab fa-whatsapp"></i> WhatsApp
            </a>

            <!-- Message Button -->
            <a id="messageButton" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#selectStudentModal">
                <i class="fas fa-comment"></i> Message
            </a>
        </div>
    </div>

    <!-- TempData Messages -->
    @if (TempData["Created"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show text-center" role="alert">
            <strong>Success!</strong>@TempData["Created"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["Update"] != null)
    {
        <div class="alert alert-info alert-dismissible fade show text-center" role="alert">
            <strong>Updated!</strong>@TempData["Update"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["Delete"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show text-center" role="alert">
            <strong>Deleted!</strong>@TempData["Delete"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }


    <!-- Table Container with Vertical Scrollbar -->
    <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
        <table class="table table-striped table-bordered align-middle" id="admissionTable">
            <thead class="table-dark sticky-top">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.Id)</th>
                    <th>@Html.DisplayNameFor(model => model.Name)</th>
                    <th>@Html.DisplayNameFor(model => model.Gender)</th>
                    <th>@Html.DisplayNameFor(model => model.Dob)</th>
                    <th>@Html.DisplayNameFor(model => model.ContactNo)</th>
                    <th>@Html.DisplayNameFor(model => model.Email)</th>
                    <th>@Html.DisplayNameFor(model => model.ParentName)</th>
                    <th>@Html.DisplayNameFor(model => model.ParentContactNo)</th>
                    <th>@Html.DisplayNameFor(model => model.PermanentAddress)</th>
                    <th>@Html.DisplayNameFor(model => model.CurrentAddress)</th>
                    <th>@Html.DisplayNameFor(model => model.City)</th>
                    <th>@Html.DisplayNameFor(model => model.Qualification)</th>
                    <th>@Html.DisplayNameFor(model => model.PreviousSchoolClg)</th>
                    <th>@Html.DisplayNameFor(model => model.Marks)</th>
                    <th>@Html.DisplayNameFor(model => model.Course)</th>
                    <th>@Html.DisplayNameFor(model => model.AddmissionDate)</th>
                    <th>@Html.DisplayNameFor(model => model.RegistrationFees)</th>
                    <th>@Html.DisplayNameFor(model => model.PaymentMode)</th>
                    <th>@Html.DisplayNameFor(model => model.TransactionId)</th>
                    <th>@Html.DisplayNameFor(model => model.CourseFees)</th>
                    <th>@Html.DisplayNameFor(model => model.Dicount)</th>
                    <th>@Html.DisplayNameFor(model => model.DicountedCourceFees)</th>
                    <th>@Html.DisplayNameFor(model => model.Installment)</th>
                    <th>@Html.DisplayNameFor(model => model.AdmissionTakenBy)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-id="@item.Id" class="clickable-row">
                        <td>@Html.DisplayFor(modelItem => item.Id)</td>
                        <td>@Html.DisplayFor(modelItem => item.Name)</td>
                        <td>@Html.DisplayFor(modelItem => item.Gender)</td>
                        <td>@Html.DisplayFor(modelItem => item.Dob)</td>
                        <td>@Html.DisplayFor(modelItem => item.ContactNo)</td>
                        <td>@Html.DisplayFor(modelItem => item.Email)</td>
                        <td>@Html.DisplayFor(modelItem => item.ParentName)</td>
                        <td>@Html.DisplayFor(modelItem => item.ParentContactNo)</td>
                        <td>@Html.DisplayFor(modelItem => item.PermanentAddress)</td>
                        <td>@Html.DisplayFor(modelItem => item.CurrentAddress)</td>
                        <td>@Html.DisplayFor(modelItem => item.City)</td>
                        <td>@Html.DisplayFor(modelItem => item.Qualification)</td>
                        <td>@Html.DisplayFor(modelItem => item.PreviousSchoolClg)</td>
                        <td>@Html.DisplayFor(modelItem => item.Marks)</td>
                        <td>@Html.DisplayFor(modelItem => item.Course)</td>
                        <td>@Html.DisplayFor(modelItem => item.AddmissionDate)</td>
                        <td>@Html.DisplayFor(modelItem => item.RegistrationFees)</td>
                        <td>@Html.DisplayFor(modelItem => item.PaymentMode)</td>
                        <td>@Html.DisplayFor(modelItem => item.TransactionId)</td>
                        <td>@Html.DisplayFor(modelItem => item.CourseFees)</td>
                        <td>@Html.DisplayFor(modelItem => item.Dicount)</td>
                        <td>@Html.DisplayFor(modelItem => item.DicountedCourceFees)</td>
                        <td>@Html.DisplayFor(modelItem => item.Installment)</td>
                        <td>@Html.DisplayFor(modelItem => item.AdmissionTakenBy)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="selectStudentModal" tabindex="-1" aria-labelledby="selectStudentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="selectStudentModalLabel">Select Student</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Please select a student to proceed with the action.</p>
                <p>After selecting a student, you can click "Proceed" to continue.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="proceedButton">Proceed</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Get the current date
            const currentDate = new Date();

            // Format date to yyyy-mm-dd
            const formattedDate = currentDate.toISOString().split('T')[0];

            // Set the value of fromDate and toDate inputs to the current date
            document.getElementById("fromDate").value = formattedDate;
            document.getElementById("toDate").value = formattedDate;
        });


        document.addEventListener("DOMContentLoaded", function () {
            // Get the current date
            const currentDate = new Date();

            // Format date to yyyy-mm-dd
            const formattedDate = currentDate.toISOString().split('T')[0];

            // Set the value of fromDate and toDate inputs to the current date
            document.getElementById("fromDate").value = formattedDate;
            document.getElementById("toDate").value = formattedDate;
        });

        document.addEventListener("DOMContentLoaded", function () {
            const tableRows = document.querySelectorAll("#admissionTable .clickable-row");
            const actionButtons = document.getElementById("actionButtons");
            const editButton = document.getElementById("editButton");
            const detailsButton = document.getElementById("detailsButton");
            const deleteButton = document.getElementById("deleteButton");

            let selectedRowId = null; // Store the selected row ID
            let selectedRow = null; // Store the selected row element

            // Add CSS dynamically
            const style = document.createElement('style');
            style.innerHTML = `
                .selected-row {
                    background-color: #c8e6c9; /* Light green color */
                }
            `;
            document.head.appendChild(style);

            // Event listener for row selection
            tableRows.forEach(row => {
                row.addEventListener("click", function () {
                    // Remove background color from the previously selected row, if any
                    if (selectedRow) {
                        selectedRow.classList.remove("selected-row");
                    }

                    // Set the new selected row
                    selectedRow = this;
                    selectedRowId = this.getAttribute("data-id");

                    // Add background color to the selected row
                    selectedRow.classList.add("selected-row");

                    // Show the action buttons when a row is selected
                    actionButtons.style.display = "block";

                    // Assign actions based on the selected row
                    editButton.setAttribute("data-id", selectedRowId);
                    detailsButton.setAttribute("data-id", selectedRowId);
                    deleteButton.setAttribute("data-id", selectedRowId);
                });
            });

            // Handle modal action
            document.querySelectorAll("[data-bs-toggle='modal']").forEach(button => {
                button.addEventListener("click", function () {
                    const action = this.id;
                    const proceedButton = document.getElementById("proceedButton");
                    proceedButton.setAttribute("data-action", action);
                });
            });

            // Handle "Proceed" button click based on selected action
            document.getElementById("proceedButton").addEventListener("click", function () {
                const action = this.getAttribute("data-action");

                if (selectedRowId) {
                    if (action === "editButton") {
                        window.location.href = `/AddmissionController1/Edit/${selectedRowId}`;
                    } else if (action === "detailsButton") {
                        window.location.href = `/AddmissionController1/Details/${selectedRowId}`;
                    } else if (action === "deleteButton") {
                        window.location.href = `/AddmissionController1/Delete/${selectedRowId}`;
                    } else if (action === "whatsappButton") {
                        alert("Proceeding to WhatsApp...");
                    } else if (action === "messageButton") {
                        alert("Proceeding to Message...");
                    }
                }
            });
        });

    </script>
   
   
    
}



